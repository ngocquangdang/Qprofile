{"version":3,"sources":["components/HomePage.js","components/AboutPage.js","components/MenuLeft.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","Container","id","styled","div","AboutPage","MenuLeft","Item","Link","href","ul","li","a","MenuList","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAIe,SAASA,IACtB,OACI,kBAACC,EAAD,CAAWC,GAAG,aACZ,yCAKR,IAAMD,EAAYE,IAAOC,IAAV,K,yFCTA,SAASC,IACtB,OACE,kBAAC,EAAD,CAAWH,GAAG,cACZ,0CAKN,IAAMD,EAAaE,IAAOC,IAAX,K,+bCTA,SAASE,IACtB,OACE,kBAAC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAMC,KAAK,cAAX,cAEF,kBAACF,EAAD,KACE,kBAACC,EAAD,CAAMC,KAAK,eAAX,gBAKR,IAAMR,EAAYE,IAAOO,GAAV,KASTH,EAAOJ,IAAOQ,GAAV,KAIJH,EAAOL,IAAOS,EAAV,K,6WCNV,IAAMX,EAAYE,IAAOC,IAAV,KAITS,EAAWV,IAAOC,IAAV,KAMRU,EAAUX,IAAOC,IAAV,KAKEW,EA7Bf,WACE,OACE,kBAAC,EAAD,KACE,kBAACF,EAAD,KACE,kBAACP,EAAD,OAEF,kBAACQ,EAAD,KACE,kBAACd,EAAD,MACA,kBAACK,EAAD,SCHYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ee5a0b5.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport ScrollableAnchor from \"react-scrollable-anchor\";\n\nexport default function HomePage() {\n  return (\n      <Container id='home-page'>\n        <p>Home Page</p>\n      </Container>\n  );\n}\n\nconst Container = styled.div`\n  height: 100vh;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport default function AboutPage(){\n  return (\n    <Container id='about-page'>\n      <p>About Page</p>\n    </Container>\n  )\n}\n\nconst Container =  styled.div`\n  height: 100vh;\n`","import React from \"react\";\nimport styled from \"styled-components\";\nexport default function MenuLeft() {\n  return (\n    <Container>\n      <Item>\n        <Link href=\"#home-page\">Home Page</Link>\n      </Item>\n      <Item>\n        <Link href=\"#about-page\">About Page</Link>\n      </Item>\n    </Container>\n  );\n}\nconst Container = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  padding-left: 0;\n  margin: 0;\n`;\nconst Item = styled.li`\n  padding: 0.7rem;  \n  list-style: none;\n`;\nconst Link = styled.a`\n  text-decoration: none;\n  color: white;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ScrollableAnchor from \"react-scrollable-anchor\";\nimport HomePage from \"./components/HomePage\";\nimport AboutPage from \"./components/AboutPage\";\nimport MenuLeft from \"./components/MenuLeft\";\n\nfunction App() {\n  return (\n    <Container>\n      <MenuList>\n        <MenuLeft></MenuLeft>\n      </MenuList>\n      <Content>\n        <HomePage />\n        <AboutPage />\n      </Content>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n`;\nconst MenuList = styled.div`\n  position: fixed;\n  background: black;\n  height: 100%;\n  width: 20%;\n`;\nconst Content = styled.div`\n  background: white;\n  margin-left: 20%;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}